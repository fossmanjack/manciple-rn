attic/EditItemComponent.js:import * as Pantry from '../slices/pantriesSlice';
attic/EditItemComponent.js:		this.dispatch(Pantry.updateItem({
components/ModalDialogComponent.js:import PantryCreateDialog from '../components/PantryCreateDialog';
components/ModalDialogComponent.js:import PantryDeleteDialog from '../components/PantryDeleteDialog';
components/ModalDialogComponent.js:import PantryDetailDialog from '../components/PantryDetailDialog';
components/ModalDialogComponent.js:import PantryEditDialog from '../components/PantryEditDialog';
components/ModalDialogComponent.js:			<PantryCreateDialog
components/ModalDialogComponent.js:			<PantryDetailDialog
components/ModalDialogComponent.js:				listID={pantryToEdit}
components/ModalDialogComponent.js:				handleEditPantry={_ => {
components/ModalDialogComponent.js:					setShowPantryDetailDialog(false);
components/ModalDialogComponent.js:					setShowPantryEditDialog(true);
components/ModalDialogComponent.js:				key={`${pantryToEdit}-detail`}
components/ModalDialogComponent.js:			<PantryEditDialog
components/ModalDialogComponent.js:				listID={pantryToEdit}
components/ModalDialogComponent.js:				setPantryID={setPantryToEdit}
components/ModalDialogComponent.js:				key={`${pantryToEdit}-edit`}
components/ModalDialogComponent.js:			<PantryDeleteDialog
components/ModalDialogComponent.js:				listID={pantryToEdit}
components/ModalDialogComponent.js:				setPantryID={setPantryToEdit}
components/ModalDialogComponent.js:				key={`${pantryToEdit}-delete`}
components/PantryDeleteDialog.js:// PantryDeleteDialog.js
components/PantryDeleteDialog.js:// Confirms deletion of pantry and asks if you want to delete all
components/PantryDeleteDialog.js:import * as Pantry from '../slices/listsSlice';
components/PantryDeleteDialog.js:export default function PantryDeleteDialog(props) {
components/PantryDeleteDialog.js:	const { _Xstate, setXstate, listID, setPantryID } = props;
components/PantryDeleteDialog.js:		setXstate({ 'showPantryDelete': false });
components/PantryDeleteDialog.js:			console.log('trying to delete current pantry!');
components/PantryDeleteDialog.js:			if(_Lists.length <= idx + 1) dispatch(Pantry.setPantry(keys[idx - 1]));
components/PantryDeleteDialog.js:		dispatch(Pantry.deletePantry(listID));
components/PantryDeleteDialog.js:			// remove the deleted pantry from parents
components/PantryDeleteDialog.js:		<Dialog.Container visible={_Xstate.showPantryDelete}>
components/PantryDeleteDialog.js:				Delete Pantry?
components/PantryDeleteDialog.js:				Are you sure you want to delete the pantry '{pantry.name}'?  You
components/ItemEditModal.js:import * as Pantry from '../slices/listsSlice';
components/ItemEditModal.js:		dispatch(Pantry.updateItem({
components/ItemEditModal.js:		// In order to ensure the pantry data is ready to go before the PantryScreen
components/ItemEditModal.js:		// re-render triggers, handle the pantry data first
components/ItemEditModal.js:		// if the itemID changes then the pantry is going to contain a useless ref
components/ItemEditModal.js:			dispatch(Pantry.updateItemInPantry([ item.id, { qty: updatedQty } ]));
components/ItemEditModal.js:				dispatch(Pantry.deleteItemFromPantry([ item.id, id ]));
components/ItemEditModal.js:					dispatch(Pantry.addItemToPantry([ refItem.id, tempData, id ]));
components/ItemEditModal.js:		// now that the pantry updates have been dispatched, push the item update to
components/ItemEditModal.js:		// inventory.  The itemIDs should then match when PantryScreen registers the
components/MainComponent.js:			handlePantryChange
components/PantryDetailDialog.js:export default function PantryDetailDialog(props) {
components/PantryDetailDialog.js:	const { _Xstate, setXstate, listID, setPantryID } = props;
components/PantryDetailDialog.js:	const pantry = _Lists[listID];
components/PantryDetailDialog.js:		console.log('handleExport', pantry);
components/PantryDetailDialog.js:		<Dialog.Container visible={_Xstate.showPantryDetail}>
components/PantryDetailDialog.js:				Pantry Info: {pantry.name}
components/PantryDetailDialog.js:					Created on: {pantry.creationDate}
components/PantryDetailDialog.js:					Last modified: {pantry.modifyDate}
components/PantryDetailDialog.js:					Pantry size: {pantry.inventory.length}
components/PantryDetailDialog.js:					'showPantryDetail': false,
components/PantryDetailDialog.js:					'showPantryEdit': true
components/PantryDetailDialog.js:				onPress={_ => setXstate({ 'showPantryDetail': false }}
components/PantryCreateDialog.js:import * as Pantry from '../slices/listsSlice';
components/PantryCreateDialog.js:export default function PantryCreateDialog(props) {
components/PantryCreateDialog.js:	const handleCreatePantry = _ => {
components/PantryCreateDialog.js:		dispatch(Pantry.addPantry([ listID, { name: input }]));
components/PantryCreateDialog.js:		dispatch(Pantry.setPantry(listID));
components/PantryCreateDialog.js:		setXstate({ 'showPantryCreate': false });
components/PantryCreateDialog.js:		<Dialog.Container visible={_Xstate.showPantryCreate}>
components/PantryCreateDialog.js:				Create New Pantry
components/PantryCreateDialog.js:				placeholder='New pantry name...'
components/PantryCreateDialog.js:					setXstate({ 'showPantryCreate': false });
components/PantryCreateDialog.js:			<Dialog.Button label='Create' onPress={handleCreatePantry} disabled={!input} />
components/InventoryItem.js:// Builds the accordion entry for each pantry item
components/InventoryItem.js:// Called from ListView and PantryView
components/InventoryItem.js:// Calls ListViewHiddenButtons and PantryViewHiddenButtons
components/InventoryItem.js:// Expects the pantry item object and dispatch functions as props
components/ScreenComponent.js:import PantryScreen from '../screens/PantryScreen';
components/ScreenComponent.js:				case 'pantry':
components/ScreenComponent.js:					return (<PantryScreen _Xstate={_Xstate} setXstate={setXstate} />);
components/ScreenComponent.js:		case 'pantry':
components/ScreenComponent.js:			return <PantryScreen />;
components/ScreenComponent.js:			: nav === 'pantry'
components/ScreenComponent.js:				? <PantryScreen
components/HeaderComponent.js:import * as Pantry from '../slices/listsSlice';
components/HeaderComponent.js:		setXstate(currentPage === 'pantry'
components/HeaderComponent.js:				'currentPage': 'pantry',
components/HeaderComponent.js:								icon={currentPage === 'pantry'
components/PantryItem.js:// Builds the accordion entry for each pantry item
components/PantryItem.js:// Called from ListView and PantryView
components/PantryItem.js:// Calls ListViewHiddenButtons and PantryViewHiddenButtons
components/PantryItem.js:// Expects the pantry item object and dispatch functions as props
components/PantryItem.js:export default function PantryItem({ item, exports }) {
components/PantryItem.js:	const PantryViewCheckBox = _ => {
components/PantryItem.js:					{ mode === 'list' ? <ListViewCheckBox /> : <PantryViewCheckBox /> }
components/PantryItem.js:						your pantry?  Your purchase history for this item will be lost!`,
components/PantryItem.js:	const PantryViewCheckBox = _ => {
components/FooterComponent.js:		if(inputText) { // if there's text, parse it and add an item to the pantry
components/PantryEditDialog.js:import * as Pantry from '../slices/listsSlice';
components/PantryEditDialog.js:export default function PantryEditDialog(props) {
components/PantryEditDialog.js:	const { _Xstate, setXstate, listID, setPantryID } = props;
components/PantryEditDialog.js:	const handleEditPantry = _ => {
components/PantryEditDialog.js:		const updatedPantry = {
components/PantryEditDialog.js:		setXstate({ 'showPantryEdit', false });
components/PantryEditDialog.js:		dispatch(Pantry.updatePantry([ listID, updatedPantry ]));
components/PantryEditDialog.js:	const handleDeletePantry = _ => {
components/PantryEditDialog.js:		// Offloading pantry deletion to its own component to use the Dialog
components/PantryEditDialog.js:		console.log('handleDeletePantry:', listID);
components/PantryEditDialog.js:			'showPantryEdit': false,
components/PantryEditDialog.js:			'showPantryDelete': true
components/PantryEditDialog.js:		<Dialog.Container visible={_Xstate.showPantryEdit}>
components/PantryEditDialog.js:				Edit Pantry
components/PantryEditDialog.js:				placeholder='Edit pantry name...'
components/PantryEditDialog.js:			<Dialog.Button label='Delete List' onPress={handleDeletePantry} />
components/PantryEditDialog.js:			<Dialog.Button label='Cancel' onPress={_ => setXstate({ 'showPantryEdit': false })} />
components/PantryEditDialog.js:			<Dialog.Button label='OK' onPress={handleEditPantry} />
components/NavDrawerComponent.js:		showPantryDetail,
components/NavDrawerComponent.js:		showPantryCreate,
components/NavDrawerComponent.js:		funs: { handlePantryChange }
components/NavDrawerComponent.js:						const pantry = _Lists[key];
components/NavDrawerComponent.js:							onPress={_ => handlePantryChange(key)}
components/NavDrawerComponent.js:									'showPantryDetail': true,
components/NavDrawerComponent.js:									'pantryToEdit': key
components/NavDrawerComponent.js:									{pantry.name}
components/NavDrawerComponent.js:					console.log('New pantry pressed');
components/NavDrawerComponent.js:						'currentPage': 'pantry',
components/NavDrawerComponent.js:						'showPantryCreate': true
components/NavDrawerComponent.js:						New Pantry...
components/Carousel.js:import * as Pantry from '../slices/listsSlice';
components/Carousel.js:		dispatch(Pantry.updateItem({
components/Carousel.js:		dispatch(Pantry.updateItem({
components/Carousel.js:		dispatch(Pantry.updateItem({
res/DEFAULT-without-uuid.js:		type: 'pantry',
res/DEFAULT-without-uuid.js:		type: 'pantry',
res/DEFAULT-with-uuid.js:		type: 'pantry',
res/DEFAULT-with-uuid.js:		type: 'pantry',
screens/HelpScreen.js:			<Pressable onPress={_ => setXstate({ 'currentPage': 'pantry' })}>
screens/HelpScreen.js:				<Text>Back to Pantry</Text>
screens/ItemStoreScreen.js:// PantryScreen.js
screens/ItemStoreScreen.js:import * as Pantry from '../slices/listsSlice';
screens/ItemStoreScreen.js:		return Utils.sortPantry(_ItemStore, sortOpts);
screens/ItemStoreScreen.js:		// Add or remove item from current pantry
screens/ItemStoreScreen.js:			// if it's in the pantry, remove it
screens/ItemStoreScreen.js:			dispatch(Pantry.deleteItemFromPantry([ itemID, currentList ]));
screens/ItemStoreScreen.js:			// if it's not in the pantry, add it
screens/ItemStoreScreen.js:			dispatch(Pantry.addItemToPantry([ itemID,
screens/ItemStoreScreen.js:				dispatch(Pantry.deleteItemFromPantry([ itemID, pnt.id ]));
screens/ItemStoreScreen.js:		// this does the same thing as PantryScreen
screens/ItemStoreScreen.js:			dispatch(Pantry.deleteItemFromPantry(item.id));
screens/ItemStoreScreen.js:			dispatch(Pantry.updatePantry([ currentList,
screens/ItemStoreScreen.js:			dispatch(Pantry.updatePantry([ currentList,
screens/ItemStoreScreen.js:		dispatch(Pantry.updateItemInPantry(
screens/ItemStoreScreen.js:		// this needs to be redone since it isn't going to have the pantry
screens/OptionsScreen.js:import * as Pantry from '../slices/listsSlice';
screens/OptionsScreen.js:			'Are you sure you want to reset the application state?  This will delete all pantry content and purchase history!',
screens/OptionsScreen.js:					onPress={_ => setNav('pantry')}
screens/OptionsScreen.js:					title='Back to Pantry'
screens/CurrentListScreen.js:// PantryScreen.js
screens/CurrentListScreen.js:import PantryItem from '../components/PantryItem';
screens/CurrentListScreen.js:import * as Pantry from '../slices/listsSlice';
screens/CurrentListScreen.js:	console.log('PantryScreen', props);
screens/CurrentListScreen.js:		// largely-immutable stuff and Pantry has the daily changes.  The props
screens/CurrentListScreen.js:		return Utils.sortPantry(
screens/CurrentListScreen.js:		dispatch(Pantry.updateItemInPantry([ itemID, newItem, currentList ]));
screens/CurrentListScreen.js:		//dispatch(Pantry.toggleInCart(itemID));
screens/CurrentListScreen.js:		// remove item from pantry, conditionally update item history,
screens/CurrentListScreen.js:		// Pantry.deleteItemFromPantry(itemID)
screens/CurrentListScreen.js:		dispatch(Pantry.deleteItemFromPantry([ itemID ]));
screens/CurrentListScreen.js:			dispatch(Pantry.deleteItemFromPantry([ item.id ]));
screens/CurrentListScreen.js:			dispatch(Pantry.updatePantry({
screens/CurrentListScreen.js:			dispatch(Pantry.updatePantry({
screens/CurrentListScreen.js:		dispatch(Pantry.updateItemInPantry(
screens/CurrentListScreen.js:			<PantryItem
screens/CurrentListScreen.js:				title={currentList === -1 ? 'No pantry loaded!' :
screens/CurrentListScreen.js:					`${_Lists[currentList].name}: Pantry view`
slices/listsSlice.js:// _Lists: { pantry1id: {...}, pantry2id: {...}, ... }
slices/listsSlice.js:// currentList: pantry1
slices/listsSlice.js:// Each pantry (object) is arranged like so:
slices/listsSlice.js:// 		name: 'Pantry name',
slices/listsSlice.js://import createPantryItem from './pantryItemSlice';
slices/listsSlice.js:	currentList: '' // holds pantry id
slices/listsSlice.js:		// pantry management
slices/listsSlice.js:			// action.payload = key (listID) of selected pantry
slices/listsSlice.js:			console.log('setPantry', action.payload);
slices/listsSlice.js:			// action.payload = [ listID, { pantry object }]
slices/listsSlice.js:			// Adds listID: pantry to _Lists
slices/listsSlice.js:			// Will not allow listID or pantry.name overwrite
slices/listsSlice.js:			// use this ONLY when creating a new pantry from scratch
slices/listsSlice.js:			// imports should use updatePantry
slices/listsSlice.js:			console.log('addPantry', action.payload);
slices/listsSlice.js:			let [ listID, newPantry ] = action.payload;
slices/listsSlice.js:			if(!newPantry || !newPantry.name) newPantry = Utils.createPantry({
slices/listsSlice.js:				...(newPantry || {}),
slices/listsSlice.js:				name: 'New pantry'
slices/listsSlice.js:					[listID]: newPantry
slices/listsSlice.js:			// action.payload = pantry ID
slices/listsSlice.js:			// update an existing pantry
slices/listsSlice.js:			// use this when importing a pantry
slices/listsSlice.js:		// pantry inventory management
slices/listsSlice.js:			console.log('addItemToPantry', lState, action);
slices/listsSlice.js:			console.log('addItemToPantry deconstruct:', itemID, props, listID);
slices/listsSlice.js:			console.log('addItemToPantry pantry info:\n',
slices/listsSlice.js:			console.log('addItemToPantry insert:', insert);
slices/listsSlice.js:			console.log('addItemToPantry updatedList:', updatedList);
slices/listsSlice.js:			// Delete an item from pantry inventory object
slices/listsSlice.js:			console.log('deleteItemFromPantry', itemID, idx);
slices/listsSlice.js:			console.log('updateItemInPantry', lState, action);
slices/listsSlice.js:			console.log('updateItemInPantry deconstruct:', itemID, props, listID);
slices/listsSlice.js:			console.log('updateItemInPantry pantry info:\n',
slices/listsSlice.js:			console.log('updateItemInPantry insert:', insert);
utils/saver.js:	// create remote directory and save manifest and pantry files
utils/saver.js:			dispatch(Pantries.updatePantry(data));
utils/saver.js:			console.log(`Error updating pantry ${data.id} -- ${err}`);
